/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package inventoryproject;

import java.awt.print.PrinterException;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import net.proteanit.sql.DbUtils;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author KJEFF
 */
public class IssuedGoods extends javax.swing.JInternalFrame {

    /**
     * Creates new form AddGoods
     */
    public IssuedGoods() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        DisplayOrder();
        DisplayCust();
        DisplayProd();
        GetCat();
        salestrack.setText(String.valueOf(OrderTable.getRowCount()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CustomerTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtcustname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtprodname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtcombocat = new javax.swing.JComboBox<>();
        txtprodqty = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        addbtn = new javax.swing.JButton();
        txtorderid = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        deletebtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtprodprice = new javax.swing.JTextField();
        printbtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        salestrack = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        searchfield = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(740, 450));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CustomerTable.setAutoCreateRowSorter(true);
        CustomerTable.setBackground(new java.awt.Color(192, 27, 54));
        CustomerTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        CustomerTable.setForeground(new java.awt.Color(255, 255, 255));
        CustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Customer ID", "Customer name", "Customer Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CustomerTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        CustomerTable.setSelectionForeground(new java.awt.Color(192, 27, 54));
        CustomerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CustomerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CustomerTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 360, 240));

        ProductTable.setBackground(new java.awt.Color(192, 27, 54));
        ProductTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        ProductTable.setForeground(new java.awt.Color(255, 255, 255));
        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prod Id", "Name", "Category", "Description", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductTable.setGridColor(new java.awt.Color(255, 255, 255));
        ProductTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        ProductTable.setSelectionForeground(new java.awt.Color(192, 27, 54));
        ProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ProductTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 20, 400, 240));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(192, 27, 54));
        jLabel2.setText("Cust name:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        txtcustname.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtcustname.setEnabled(false);
        jPanel1.add(txtcustname, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 280, 100, -1));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(192, 27, 54));
        jLabel4.setText("Prod Name:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 80, -1));

        txtprodname.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtprodname.setEnabled(false);
        jPanel1.add(txtprodname, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 320, 100, -1));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(192, 27, 54));
        jLabel5.setText("Prod Cat:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 70, -1));

        txtcombocat.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txtcombocat.setEnabled(false);
        jPanel1.add(txtcombocat, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 100, -1));

        txtprodqty.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jPanel1.add(txtprodqty, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 400, 100, -1));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(192, 27, 54));
        jLabel6.setText("Prod Qty:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 70, -1));

        OrderTable.setBackground(new java.awt.Color(192, 27, 54));
        OrderTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        OrderTable.setForeground(new java.awt.Color(255, 255, 255));
        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id ", "custname  ", "prodname ", "prodcat ", "prodqty ", "prodprice", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderTable.setGridColor(new java.awt.Color(255, 255, 255));
        OrderTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        OrderTable.setSelectionForeground(new java.awt.Color(192, 27, 54));
        jScrollPane3.setViewportView(OrderTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, 560, 250));

        addbtn.setBackground(new java.awt.Color(192, 27, 54));
        addbtn.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        addbtn.setForeground(new java.awt.Color(255, 255, 255));
        addbtn.setText("Add Order");
        addbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addbtnMouseClicked(evt);
            }
        });
        jPanel1.add(addbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 560, -1, -1));

        txtorderid.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jPanel1.add(txtorderid, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 480, 100, -1));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(192, 27, 54));
        jLabel7.setText("Order Id:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 70, -1));

        deletebtn.setBackground(new java.awt.Color(192, 27, 54));
        deletebtn.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        deletebtn.setForeground(new java.awt.Color(255, 255, 255));
        deletebtn.setText("Delete");
        deletebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletebtnMouseClicked(evt);
            }
        });
        jPanel1.add(deletebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 560, -1, -1));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(192, 27, 54));
        jLabel8.setText("Prod Price:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 80, -1));

        txtprodprice.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jPanel1.add(txtprodprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, 100, -1));

        printbtn.setBackground(new java.awt.Color(192, 27, 54));
        printbtn.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        printbtn.setForeground(new java.awt.Color(255, 255, 255));
        printbtn.setText("Print");
        printbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printbtnMouseClicked(evt);
            }
        });
        jPanel1.add(printbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 560, 80, -1));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(192, 27, 54));
        jLabel9.setText("Total sales:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 80, 40));

        salestrack.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        salestrack.setForeground(new java.awt.Color(192, 27, 54));
        jPanel1.add(salestrack, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 530, 90, 50));

        jLabel10.setText("Search:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 270, 50, 20));

        searchfield.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        searchfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchfieldKeyReleased(evt);
            }
        });
        jPanel1.add(searchfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 270, 180, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // declare variables to allow to connect, create and edit database
    Connection Con = null;
    Statement St = null;
    ResultSet Rs = null;
    
    // Displays orders in JTable from the database
    public void DisplayOrder()
    {
        try{
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
            St = Con.createStatement();
            Rs = St.executeQuery("select orderid as 'Order Id', custname as 'Cust Name', prodname as 'Prod Name', prodcat as 'Prod Cat', prodqty as 'Prod Qty', prodprice as 'Prod Price', total as 'Total' from ordertb");
            OrderTable.setModel(DbUtils.resultSetToTableModel(Rs));
            
        }catch(SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    // Displays product from the database in JTable
    public void DisplayProd()
    {
        try{
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
            St = Con.createStatement();
            Rs = St.executeQuery("select prodid as 'Prod id', prodname as 'Name', prodcat as 'Category', proddesc as 'Description', prodqty as 'Quantity' from producttb");
            ProductTable.setModel(DbUtils.resultSetToTableModel(Rs));
            
        }catch(SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    // Displays customers from the database in JTable
    public void DisplayCust()
    {
        try{
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
            St = Con.createStatement();
            Rs = St.executeQuery("select custid as 'Customer Id', custname as 'Customer Name', custphone as 'Customer Phone' from customertb");
            CustomerTable.setModel(DbUtils.resultSetToTableModel(Rs));
            
        }catch(SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    private void GetCat()
    {
        try
        {
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
            St = Con.createStatement();
            String query = "select * from inventorydb.categorytb";
            Rs = St.executeQuery(query);
            while(Rs.next())
            {
                String MyCat = Rs.getString("catname");
                txtcombocat.addItem(MyCat);
            }
        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    // Update database when product in stock or quantity is finished or part being bought
    private void update()
    {
        int newqty = oldquantity - Integer.valueOf(txtprodqty.getText());
        try
            {   
                if(newqty <= 0)
                {
                    Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                    String Query = "Delete from inventorydb.producttb where prodid="+productid;
                    Statement Add = Con.createStatement();
                    Add.executeUpdate(Query);
                    JOptionPane.showMessageDialog(null, "The Product in stock is finished");
                    DisplayProd();
                }
                else
                {
                    Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                    String UpdateQuery = "update inventorydb.producttb set prodqty="+newqty+""+" where prodid="+productid;
                    Statement Add = Con.createStatement();
                    Add.executeUpdate(UpdateQuery);
                    DisplayProd();
                    Con.close();
                }
            }catch(SQLException e)
            {
                e.printStackTrace();
            }
    }
    
    // Set customer name from jTable to jTextfield
    private void CustomerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) CustomerTable.getModel();
        int selectedrow = CustomerTable.getSelectedRow();
        txtcustname.setText(model.getValueAt(selectedrow, 1).toString());
        
    }//GEN-LAST:event_CustomerTableMouseClicked
    
    // Sets product id, name, categories from JTable to Jtextfield
    int productid, oldquantity;
    private void ProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        int selectedrow = ProductTable.getSelectedRow();
        productid = Integer.valueOf(model.getValueAt(selectedrow, 0).toString());
        txtprodname.setText(model.getValueAt(selectedrow, 1).toString());
        txtcombocat.setSelectedItem(model.getValueAt(selectedrow, 2).toString());
        txtprodqty.setText(model.getValueAt(selectedrow, 4).toString());
        oldquantity = Integer.valueOf(model.getValueAt(selectedrow, 4).toString());
    }//GEN-LAST:event_ProductTableMouseClicked
    
    // Adds orders to database and reflects in JTable
    int total;
    private void addbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addbtnMouseClicked
        if(txtprodprice.getText().isEmpty() || txtprodqty.getText().isEmpty() || txtorderid.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Missing Information");
        }
        else
        {
            try{
                total = Integer.parseInt(txtprodqty.getText()) * Integer.parseInt(txtprodprice.getText());
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                PreparedStatement add = Con.prepareStatement("insert into ordertb values(?,?,?,?,?,?,?)");
                add.setInt(1, Integer.valueOf(txtorderid.getText()));
                add.setString(2, txtcustname.getText());
                add.setString(3, txtprodname.getText());
                add.setString(4, txtcombocat.getSelectedItem().toString());
                add.setInt(5, Integer.valueOf(txtprodqty.getText()));
                add.setInt(7, Integer.valueOf(txtprodprice.getText()));
                add.setInt(6, total);
                int row = add.executeUpdate();
                JOptionPane.showMessageDialog(this, "Order Successfully Added");
                Con.close();
                DisplayOrder();
                update();
                ClearField();
            }catch(SQLException e)
            {
                e.printStackTrace();
            }
        }
        
        
    }//GEN-LAST:event_addbtnMouseClicked

    // Deletes items in database and reflects in JTable
    private void deletebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletebtnMouseClicked
        if(txtorderid.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Enter the Order id of the Order you want to delete");
        }
        else
        {
            try{
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                String Id = txtorderid.getText();
                String Query = "Delete from inventorydb.ordertb where orderid="+Id;
                Statement Add = Con.createStatement();
                Add.executeUpdate(Query);
                DisplayOrder();
                ClearField();
                JOptionPane.showMessageDialog(null, "Order has been successfully deleted!");
            }catch(SQLException | NumberFormatException e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_deletebtnMouseClicked

    // Prints orders from customers
    private void printbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printbtnMouseClicked
        try
        {
            OrderTable.print();
        }catch(PrinterException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_printbtnMouseClicked

    private void searchfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchfieldKeyReleased
        DefaultTableModel model = (DefaultTableModel) OrderTable.getModel();
        String search = searchfield.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter(model);
        OrderTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_searchfieldKeyReleased

    // clears jtextfields
    public void ClearField()
    {
        txtcustname.setText("");
        txtorderid.setText("");
        txtprodname.setText("");
        txtprodprice.setText("");
        txtprodqty.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CustomerTable;
    public javax.swing.JTable OrderTable;
    public javax.swing.JTable ProductTable;
    private javax.swing.JButton addbtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton printbtn;
    private javax.swing.JLabel salestrack;
    private javax.swing.JTextField searchfield;
    public javax.swing.JComboBox<String> txtcombocat;
    private javax.swing.JTextField txtcustname;
    private javax.swing.JTextField txtorderid;
    private javax.swing.JTextField txtprodname;
    private javax.swing.JTextField txtprodprice;
    private javax.swing.JTextField txtprodqty;
    // End of variables declaration//GEN-END:variables
}
