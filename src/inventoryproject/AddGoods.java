                    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package inventoryproject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;



/**
 *
 * @author KJEFF
 */
public class AddGoods extends javax.swing.JInternalFrame {

    /**
     * Creates new form AddGoods
     */
    
    public AddGoods() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        DisplayProd();
        GetCat();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addgoods = new javax.swing.JButton();
        goodname1 = new javax.swing.JLabel();
        txtprodid = new javax.swing.JTextField();
        txtprodname = new javax.swing.JTextField();
        goodname = new javax.swing.JLabel();
        txtcombocat = new javax.swing.JComboBox<>();
        category = new javax.swing.JLabel();
        txtproddesc = new javax.swing.JTextField();
        quantity2 = new javax.swing.JLabel();
        quantity1 = new javax.swing.JLabel();
        txtquantity = new javax.swing.JTextField();
        txtvendor = new javax.swing.JTextField();
        quantity = new javax.swing.JLabel();
        buyingprice = new javax.swing.JLabel();
        txtbuyingprice = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        updbtn = new javax.swing.JButton();
        popbtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        removebtn = new javax.swing.JButton();
        searchfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(740, 450));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addgoods.setBackground(new java.awt.Color(192, 27, 54));
        addgoods.setFont(new java.awt.Font("Century Gothic", 3, 14)); // NOI18N
        addgoods.setForeground(new java.awt.Color(255, 255, 255));
        addgoods.setText("ADD");
        addgoods.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addgoodsMouseClicked(evt);
            }
        });
        jPanel1.add(addgoods, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 90, 30));

        goodname1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goodname1.setForeground(new java.awt.Color(42, 39, 41));
        goodname1.setText("Product Id:");
        jPanel1.add(goodname1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        txtprodid.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jPanel1.add(txtprodid, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 190, 30));

        txtprodname.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jPanel1.add(txtprodname, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 190, 30));

        goodname.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goodname.setForeground(new java.awt.Color(42, 39, 41));
        goodname.setText("Product Name:");
        jPanel1.add(goodname, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        txtcombocat.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txtcombocat.setPreferredSize(new java.awt.Dimension(64, 23));
        jPanel1.add(txtcombocat, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 190, 30));

        category.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        category.setForeground(new java.awt.Color(42, 39, 41));
        category.setText("Category:");
        jPanel1.add(category, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        txtproddesc.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jPanel1.add(txtproddesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 190, 30));

        quantity2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        quantity2.setForeground(new java.awt.Color(42, 39, 41));
        quantity2.setText("Description:");
        jPanel1.add(quantity2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        quantity1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        quantity1.setForeground(new java.awt.Color(42, 39, 41));
        quantity1.setText("Quantity:");
        jPanel1.add(quantity1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        txtquantity.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jPanel1.add(txtquantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 190, 30));

        txtvendor.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jPanel1.add(txtvendor, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 190, 30));

        quantity.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        quantity.setForeground(new java.awt.Color(42, 39, 41));
        quantity.setText("Vendor:");
        jPanel1.add(quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        buyingprice.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        buyingprice.setForeground(new java.awt.Color(42, 39, 41));
        buyingprice.setText("Buying Price(per):");
        jPanel1.add(buyingprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        txtbuyingprice.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jPanel1.add(txtbuyingprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 250, 190, 30));

        ProductTable.setBackground(new java.awt.Color(192, 27, 54));
        ProductTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        ProductTable.setForeground(new java.awt.Color(255, 255, 255));
        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prod Id", "Name", "Category", "Description", "Quantity", "Vendor", "Buying Price", "Gross Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductTable.setGridColor(new java.awt.Color(255, 255, 255));
        ProductTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        ProductTable.setSelectionForeground(new java.awt.Color(192, 27, 54));
        ProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ProductTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 720, 290));

        updbtn.setBackground(new java.awt.Color(192, 27, 54));
        updbtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        updbtn.setForeground(new java.awt.Color(255, 255, 255));
        updbtn.setText("Update");
        updbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updbtnMouseClicked(evt);
            }
        });
        jPanel1.add(updbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 180, 90, 30));

        popbtn.setBackground(new java.awt.Color(192, 27, 54));
        popbtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        popbtn.setForeground(new java.awt.Color(255, 255, 255));
        popbtn.setText("Pop");
        popbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                popbtnMouseClicked(evt);
            }
        });
        jPanel1.add(popbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 180, 80, 30));

        deletebtn.setBackground(new java.awt.Color(192, 27, 54));
        deletebtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        deletebtn.setForeground(new java.awt.Color(255, 255, 255));
        deletebtn.setText("Delete");
        deletebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletebtnMouseClicked(evt);
            }
        });
        jPanel1.add(deletebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 120, 80, 30));

        removebtn.setBackground(new java.awt.Color(192, 27, 54));
        removebtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        removebtn.setForeground(new java.awt.Color(255, 255, 255));
        removebtn.setText("Remove");
        removebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removebtnMouseClicked(evt);
            }
        });
        jPanel1.add(removebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 120, 90, 30));

        searchfield.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        searchfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchfieldKeyReleased(evt);
            }
        });
        jPanel1.add(searchfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 240, 180, -1));

        jLabel2.setText("Search:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 240, 50, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // declaring stack, queue, otherqueue, list and hashmap
    Stack stack = new Stack();
    Queue queue = new LinkedList();
    Queue otherqueue = new LinkedList();
    List<String> list = new LinkedList<>();
    HashMap<Integer, String> hashmap = new HashMap<>();
    
    //Stores items in stack, list, queues, otherqueue and hashmap
    public void storeItems()
    {
        // Adding items to stack, queue and list
        if(txtcombocat.getSelectedItem().equals("Beverages") || txtcombocat.getSelectedItem().equals("Bread/Bakery") || txtcombocat.getSelectedItem().equals("Canned/Jarred Goods") || txtcombocat.getSelectedItem().equals("Dairy"))
        {
            stack.push(txtprodname.getText());
        }
        else if(txtcombocat.getSelectedItem().equals("Dry/Baking Goods") || txtcombocat.getSelectedItem().equals("Frozen Foods") || txtcombocat.getSelectedItem().equals("Meat"))
        {
            queue.add(txtprodname.getText());
        }
        else if(txtcombocat.getSelectedItem().equals("Produce") || txtcombocat.getSelectedItem().equals("Cleaners") || txtcombocat.getSelectedItem().equals("Paper Goods") || txtcombocat.getSelectedItem().equals("Personal Care"))
        {
            list.add(txtprodname.getText());
        }
        else
        {
            otherqueue.add(txtprodname.getText());
        }

        // Storing vendors in hashmap
        int j = 1;
        hashmap.put(j, txtvendor.getText());
        j++;
        
        
    }
    
    // Clears JTextfield
    public void Clearfield()
    {
        txtprodid.setText("");
        txtprodname.setText("");
        txtproddesc.setText("");
        txtquantity.setText("");
        txtvendor.setText("");
        txtbuyingprice.setText("");
    }
    
    // Displays product in database in JTable
    public void DisplayProd()
    {
        try{
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
            St = Con.createStatement();
            Rs = St.executeQuery("select prodid as 'Prod id', prodname as 'Name', prodcat as 'Category', proddesc as 'Description', prodqty as 'Quantity', prodvend as 'Vendors', prodbuyp as 'Buying Price', prodgrossp as 'Gross Price' from producttb");
            ProductTable.setModel(DbUtils.resultSetToTableModel(Rs));
            
        }catch(SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    //Get categories in database
    private void GetCat()
    {
        try
        {
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
            St = Con.createStatement();
            String query = "select * from inventorydb.categorytb";
            Rs = St.executeQuery(query);
            while(Rs.next())
            {
                String MyCat = Rs.getString("catname");
                txtcombocat.addItem(MyCat);
            }
        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    // declare variables to allow to connect, create and edit database
    Connection Con = null;
    Statement St = null;
    ResultSet Rs = null;
    
    // Adds product id, product name, categories, description, quantity, vendor and buyingprice to the database
    private void addgoodsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addgoodsMouseClicked
        
        if(txtprodid.getText().isEmpty() || txtprodname.getText().isEmpty() || txtproddesc.getText().isEmpty() || txtquantity.getText().isEmpty() || txtvendor.getText().isEmpty() || txtbuyingprice.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Missing Information");
        }
        else
        {
            try{
                int grooss_price = Integer.parseInt(txtquantity.getText()) * Integer.parseInt(txtbuyingprice.getText()); 
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                PreparedStatement add = Con.prepareStatement("insert into producttb values(?,?,?,?,?,?,?,?)");
                add.setInt(1, Integer.valueOf(txtprodid.getText()));
                add.setString(2, txtprodname.getText());
                add.setString(3, txtcombocat.getSelectedItem().toString());
                add.setString(4, txtproddesc.getText());
                add.setInt(5, Integer.valueOf(txtquantity.getText()));
                add.setString(6, txtvendor.getText());
                add.setInt(7, Integer.valueOf(txtbuyingprice.getText()));
                add.setInt(8, grooss_price);
                int row = add.executeUpdate();
                JOptionPane.showMessageDialog(this, "Product Successfully Added");
                Con.close();
                DisplayProd();
                storeItems();
                Clearfield();
             }catch(SQLException e)
             {
                 e.printStackTrace();
             }
        }
        
        
        
    }//GEN-LAST:event_addgoodsMouseClicked

    // Allows to update items in the database
    int grossprice;
    private void updbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updbtnMouseClicked
        grossprice = Integer.parseInt(txtquantity.getText()) * Integer.parseInt(txtbuyingprice.getText());
        if(txtprodid.getText().isEmpty() || txtprodname.getText().isEmpty() || txtproddesc.getText().isEmpty() || txtquantity.getText().isEmpty() || txtvendor.getText().isEmpty() || txtbuyingprice.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Missing Information!");
        }
        else
        {
            try
            {
                String txtGrossPrice = Integer.toString(grossprice);
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                String UpdateQuery = "update inventorydb.producttb set prodname='"+txtprodname.getText()+"'"+", prodcat='"+txtcombocat.getSelectedItem().toString()+"'"+", proddesc='"+txtproddesc.getText()+"'"+", prodqty="+txtquantity.getText()+""+", prodvend='"+txtvendor.getText()+"'"+", prodbuyp="+txtbuyingprice.getText()+""+", prodgrossp="+txtGrossPrice+""+" where prodid="+txtprodid.getText();
                Statement Add = Con.createStatement();
                Add.executeUpdate(UpdateQuery);
                JOptionPane.showMessageDialog(null, "Product Successfully updated!");
                DisplayProd();
                Con.close();
                
            }catch(SQLException e)
            {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_updbtnMouseClicked

    // When a row in the table is click, values are set to the textfields
    private void ProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        int selectedrow = ProductTable.getSelectedRow();
        txtprodid.setText(model.getValueAt(selectedrow, 0).toString());
        txtprodname.setText(model.getValueAt(selectedrow, 1).toString());
        txtcombocat.setSelectedItem(model.getValueAt(selectedrow, 2).toString());
        txtproddesc.setText(model.getValueAt(selectedrow, 3).toString());
        txtquantity.setText(model.getValueAt(selectedrow, 4).toString());
        txtvendor.setText(model.getValueAt(selectedrow, 5).toString());
        txtbuyingprice.setText(model.getValueAt(selectedrow, 6).toString());
    }//GEN-LAST:event_ProductTableMouseClicked

    // Performs the stack operation by removing the last item added
    private void popbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_popbtnMouseClicked
        if(txtcombocat.getSelectedItem() == "")
        {
            JOptionPane.showMessageDialog(null, "Select a category");
        }
        else if(txtcombocat.getSelectedItem().toString().equals("Beverages") || txtcombocat.getSelectedItem().toString().equals("Bread/Bakery") || txtcombocat.getSelectedItem().toString().equals("Canned/Jarred Goods") || txtcombocat.getSelectedItem().toString().equals("Dairy"))
        {
            
            try{
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                String productname = stack.pop().toString();
                String Query = "Delete from inventorydb.producttb where prodname='"+productname+"'";
                Statement Add = Con.createStatement();
                Add.executeUpdate(Query);
                DisplayProd();
                JOptionPane.showMessageDialog(null, "Product in stack has been successfully deleted!");
            }catch(SQLException | NumberFormatException e)
            {
                e.printStackTrace();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Product not available to be deleted!");
        }
    }//GEN-LAST:event_popbtnMouseClicked

    // Deletes item in the database which then deletes from the table
    private void deletebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletebtnMouseClicked

        if(txtprodid.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "You need to enter an integer!");
        }
        else
        {
            try{
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                String Id = txtprodid.getText();
                String Query = "Delete from inventorydb.producttb where prodid="+Id;
                Statement Add = Con.createStatement();
                Add.executeUpdate(Query);
                DisplayProd();
                txtprodid.setText("");
                JOptionPane.showMessageDialog(null, "Product has been successfully deleted!");
            }catch(SQLException | NumberFormatException e)
            {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_deletebtnMouseClicked

    // Performs queue operations by removing and list operation by removing at index 0
    private void removebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removebtnMouseClicked
        if(txtcombocat.getSelectedItem() == "")
        {
            JOptionPane.showMessageDialog(null, "Select a category");
        }
        else if(txtcombocat.getSelectedItem().toString().equals("Dry/Baking Goods") || txtcombocat.getSelectedItem().toString().equals("Frozen Foods") || txtcombocat.getSelectedItem().toString().equals("Meat"))
        {
            
            try{
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                String productname = queue.remove().toString();
                String Query = "Delete from inventorydb.producttb where prodname='"+productname+"'";
                Statement Add = Con.createStatement();
                Add.executeUpdate(Query);
                DisplayProd();
                JOptionPane.showMessageDialog(null, "Product in queue has been successfully deleted!");
            }catch(SQLException | NumberFormatException e)
            {
                e.printStackTrace();
            }
        }
        else if(txtcombocat.getSelectedItem().toString().equals("Produce") || txtcombocat.getSelectedItem().toString().equals("Cleaners") || txtcombocat.getSelectedItem().toString().equals("Paper Goods") || txtcombocat.getSelectedItem().toString().equals("Personal Care"))
        {
            
            try{
                Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/InventoryDB", "root", "root");
                String productname = list.remove(0);
                String Query = "Delete from inventorydb.producttb where prodname='"+productname+"'";
                Statement Add = Con.createStatement();
                Add.executeUpdate(Query);
                DisplayProd();
                JOptionPane.showMessageDialog(null, "Product in queue has been successfully deleted!");
            }catch(SQLException | NumberFormatException e)
            {
                e.printStackTrace();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Product not available to be deleted!");
        }
    }//GEN-LAST:event_removebtnMouseClicked

    private void searchfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchfieldKeyReleased
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        String search = searchfield.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter(model);
        ProductTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
        
    }//GEN-LAST:event_searchfieldKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable ProductTable;
    private javax.swing.JButton addgoods;
    private javax.swing.JLabel buyingprice;
    private javax.swing.JLabel category;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel goodname;
    private javax.swing.JLabel goodname1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton popbtn;
    private javax.swing.JLabel quantity;
    private javax.swing.JLabel quantity1;
    private javax.swing.JLabel quantity2;
    private javax.swing.JButton removebtn;
    private javax.swing.JTextField searchfield;
    public javax.swing.JTextField txtbuyingprice;
    public javax.swing.JComboBox<String> txtcombocat;
    public javax.swing.JTextField txtproddesc;
    public javax.swing.JTextField txtprodid;
    public javax.swing.JTextField txtprodname;
    public javax.swing.JTextField txtquantity;
    public javax.swing.JTextField txtvendor;
    private javax.swing.JButton updbtn;
    // End of variables declaration//GEN-END:variables
}
